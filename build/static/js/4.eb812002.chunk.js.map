{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","char","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x2","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","key","value","errorInfo","console","log","this","setState","props","children","Component","View","imgStyle","_jsxs","className","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","renderItems","disabled","Skeleton","_Fragment","match","CharInfo","charId","skeleton","MainPage","selectedChar","setSelectedChar","selectedCharId","decoration"],"mappings":"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","file":"static/js/4.eb812002.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} alt=\"Error\" style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\" }} />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ba8352bbedbd1e3c25d41add04114b02\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map((char) => _transformCharacter(char));\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      // optional chaining operator\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, { method, body, headers });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch (e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // const timerId = setInterval(updateChar, 3000);\n\n    // return () => clearInterval(timerId);\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} key={char.id} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\">\n          <div className=\"inner\" onClick={updateChar}>\n            Try it\n          </div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\n// Рендерящий компонент.\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  // let imgStyle = thumbnail.match(/image_not_available/) ? { objectFit: \"contain\" } : { objectFit: \"cover\" };\n  let imgStyle = { objectFit: \"cover\" };\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">Homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove(\"char__item_selected\"));\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={item.id}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, clearError, getCharacter } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, []);\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n\n    if (!charId) return;\n\n    clearError();\n\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} key={char.id} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n  let imgStyle = thumbnail.match(/image_not_available/) ? { objectFit: \"unset\" } : { objectFit: \"cover\" };\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.slice(0, 10).map((item, i) => {\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList selectedCharId={selectedChar} onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}