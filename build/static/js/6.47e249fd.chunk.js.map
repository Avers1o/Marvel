{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","char","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x2","getCharactersByName","_ref5","_callee5","name","_context5","_transformCharactersByName","_x3","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","key","value","errorInfo","console","log","this","setState","props","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","TransitionGroup","component","renderItems","disabled","match","CharInfo","loading","charId","Link","to","CharSearchForm","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","onChange","target","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","setSelectedChar","Helmet","content","selectedCharId","decoration"],"mappings":"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","file":"static/js/6.47e249fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} alt=\"Error\" style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\" }} />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ba8352bbedbd1e3c25d41add04114b02\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map((char) => _transformCharacter(char));\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharactersByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?nameStartsWith=${name}&orderBy=name&limit=9&${_apiKey}`);\r\n    return res.data.results.map((char) => _transformCharactersByName(char));\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      // optional chaining operator\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  const _transformCharactersByName = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharactersByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n    setProcess(\"loading\");\r\n\r\n    try {\r\n      const response = await fetch(url, { method, body, headers });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch (e) {\r\n      setProcess(\"error\");\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} key={data.id} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unecpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // const timerId = setInterval(updateChar, 3000);\n\n    // return () => clearInterval(timerId);\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\">\n          <div className=\"inner\" onClick={updateChar}>\n            Try it\n          </div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\n// Рендерящий компонент.\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n\n  // let imgStyle = thumbnail.match(/image_not_available/) ? { objectFit: \"contain\" } : { objectFit: \"cover\" };\n  let imgStyle = { objectFit: \"cover\" };\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">Homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unecpected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { process, setProcess, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove(\"char__item_selected\"));\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// import Spinner from \"../spinner/Spinner\";\n// import ErrorMessage from \"../errorMessage/ErrorMessage\";\n// import Skeleton from \"../skeleton/Skeleton\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, clearError, process, setProcess, getCharacter } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, []);\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n\n    if (!charId) return;\n\n    clearError();\n\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  // const setContent = (process, char) => {\n  //   switch (process) {\n  //     case \"waiting\":\n  //       return <Skeleton />;\n  //       break;\n  //     case \"loading\":\n  //       return <Spinner />;\n  //       break;\n  //     case \"confirmed\":\n  //       return <View char={char} key={char.id} />;\n  //       break;\n  //     case \"error\":\n  //       return <ErrorMessage />;\n  //       break;\n  //     default:\n  //       throw new Error(\"Unecpected process state\");\n  //   }\n  // };\n\n  // const skeleton = char || loading || error ? null : <Skeleton />;\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const spinner = loading ? <Spinner /> : null;\n  // const content = !(loading || error || !char) ? <View char={char} key={char.id} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {/* {skeleton}\n      {errorMessage}\n      {spinner}\n      {content} */}\n      {setContent(process, View, char)}\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n  let imgStyle = thumbnail.match(/image_not_available/) ? { objectFit: \"unset\" } : { objectFit: \"cover\" };\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.slice(0, 10).map((item, i) => {\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst setContent = (process, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return null;\r\n    case \"loading\":\r\n      return null;\r\n    case \"confirmed\":\r\n      return !data ? null : data.length > 0 ? (\r\n        data.map((item) => (\r\n          <div key={item.id} className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {item.name} page?</div>\r\n            <Link to={`/characters/${item.id}`} className=\"button button__secondary\">\r\n              <div className=\"inner\">To page</div>\r\n            </Link>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\r\n      );\r\n    case \"error\":\r\n      return (\r\n        <div className=\"char__search-critical-error\">\r\n          <ErrorMessage />\r\n        </div>\r\n      );\r\n    default:\r\n      throw new Error(\"Unecpected process state\");\r\n  }\r\n};\r\n\r\nconst CharSearchForm = () => {\r\n  const [charList, setChar] = useState(null);\r\n  const { process, setProcess, getCharactersByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharactersByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form onChange={(e) => (!e.target.value ? setChar(null) : null)}>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"button button__main\" disabled={process === \"loading\"}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {setContent(process, charList)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList selectedCharId={selectedChar} onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}